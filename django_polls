django　投票系统开发

目标：　掌握django　基于ｍｖｔ架构的　templates views urls开发，　基本的项目设置，命令。

1.基础环境搭建与安装django
pip install virtualenv
virtualenv django111
#cd /data/www/django111
#source ./bin/activate
deactivate

#django-admin startproject mypolls
#python manage.py startapp polls



2.数据库创建与模型设计，导入等

#vi polls/models.py
============================================
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models

# Create your models here.
import datetime
from django.utils import timezone


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def __str__(self):
        return self.question_text
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)




class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    def __str__(self):
        return self.choice_text

=================

使models生效 ,连接数据库
#vi mysite/settings.py
================
INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

=====数据库设置＝＝＝＝＝＝＝＝＝＝＝＝
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_polls',
        'USER': 'root',
        'PASSWORD': 'Aa***',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
=================

#创建更改的文件
python manage.py makemigrations
#将生成的py文件应用到数据库
python manage.py migrate

#创建超级管理员
python manage.py createsuperuser
python manage.py changepassword username
启动程序，登录后台
python manage.py runserver

3. views urls templates设置

#vi mypolls/urls.py
====指定访问/polls/　调用 polls　的ｕｒｌｓ路由规则
from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    url(r'^polls/', include('polls.urls', namespace="polls")),
    #url(r'^polls/', include('polls.urls')),
    url(r'^admin/', admin.site.urls),
]
================
vi polls/urls.py
======设置每个视图的访问规则============
from django.conf.urls import url

from . import views


app_name = 'polls'

urlpatterns = [
    # ex: /polls/
    url(r'^$', views.index, name='index'),
    # ex: /polls/5/
    url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail'),
    # ex: /polls/5/results/
    url(r'^(?P<question_id>[0-9]+)/results/$', views.results, name='results'),
    # ex: /polls/5/vote/
    url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote'),
]
=====================
vi polls/views.py
====================
# coding=utf-8
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from .models import Question, Choice


# Create your views here.
# 首页展示所有问题
def index(request):
    # latest_question_list2 = Question.objects.order_by('-pub_data')[:2]
    latest_question_list = Question.objects.all()
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)


# 查看所有问题
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})


# 查看投票结果
def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/results.html', {'question': question})


# 选择投票
def vote(request, question_id):
    p = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': p,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))
==================
新建三个模板文件

vi polls/templates/polls/index.html
=======
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}
=======
vi polls/templates/polls/detail.html
=======
<h1>{{ question.question_text }}</h1>

{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
{% for choice in question.choice_set.all %}
    <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
    <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br />
{% endfor %}
<input type="submit" value="Vote" />
</form>
===============
vi polls/templates/polls/results.html
============
<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>
============

４．将ｐｏｌｌｓ注册到ａｄｍｉｎ，　添加ｃｈｏｉｃｅ内容，添加ｑｕｅｓｔｉｏｎ内容。前台投票正常展示，系统完成。

vi polls/admin.py
======================
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.contrib import admin

# Register your models here.


#from .models import Question

from .models import Question, Choice


#admin.site.register(Question)


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]
    list_display = ('question_text', 'pub_date')


admin.site.register(Choice)
admin.site.register(Question, QuestionAdmin)
===============

系统完成,界面展示
http://127.0.0.1:8000/polls/1/results/

What's up?

    Not much -- 1 vote
    The sky -- 3 votes
    Just hacking again -- 2 votes

Vote again?

参考连接：
https://djangobook.com/the-django-book/ 一本不错的书
https://docs.djangoproject.com/en/1.11/
http://usyiyi.cn/translate/Django_111/contents.html
https://www.cnblogs.com/fnng/p/4855743.html

ＦＡＱ：
1.官方文档非常详细了，但是跟着做完之后发现没有ｃｈｏｉｃｅ内容。注意ｃｈｏｉｃｅ内容是在　api那添加的，后面添加可以在ａｄｍｉｎ后台添加
