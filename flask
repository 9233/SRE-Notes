=============================
flask开发总结
=============================
1.config　项目目录架构

    from .main import main as main_blueprint
    app.register_blueprint(main_blueprint)

    from .auth import auth as auth_blueprint
    app.register_blueprint(auth_blueprint, url_prefix='/auth')


=====models=========

class Patch(db.Model):
    __tablename__ = 'Patch'
    id = db.Column(db.Integer, primary_key=True)
    project = db.Column(db.String(36))
    branch = db.Column(db.String(99))
    patchtype = db.Column(db.String(10))
    patchname = db.Column(db.String(99))
    mergetime = db.Column(db.DateTime)
    downloadlink = db.Column(db.String(99))

    #def __repr__(self):
        #return 'patchtype: %s , patchname: %s' %(self.patchtype,self.patchname)
    def __repr__(self):
        return '%s : %s' %(self.patchtype,self.patchname)



====forms=========
class PatchForm(FlaskForm):
    #project = StringField('Enter project name', validators=[DataRequired()])

    project = SelectField(
        'project',
        validators=[DataRequired()],
        choices=[('u304','u304'),('u303','u303'),('u202','u202')],
        default = 'u304'
    )
    submit = SubmitField('Search')

========templates===============
@main.route('/user/<username>')
def user(username):
    user = User.query.filter_by(username=username).first_or_404()
    page = request.args.get('page', 1, type=int)
    pagination = user.posts.order_by(Post.timestamp.desc()).paginate(
        page, per_page=current_app.config['FLASKY_POSTS_PER_PAGE'],
        error_out=False)
    posts = pagination.items
    return render_template('user.html', user=user, posts=posts,
                           pagination=pagination)



{%if user%}
hello {{ user }}
{% else %}
hello stanger
{endif}


{% for i in users%}
         {{i}}
         {%endfor%}


==========flask-sqlalchemy 使用MySQL=============


pip install mysql-python
pip install flask-sqlalchemy

相关示例Python代码

# 文件名hello.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)
app.config['SECRET_KEY'] = 'Fianna'
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://user:password@host:port/dbname'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True
db = SQLAlchemy(app)
class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, nullable=False, primary_key=True, autoincrement=True)
    name = db.Column(db.String(16), nullable=False, server_default='', unique=True)
    def __repr__(self):
        return '<Role %r>' % self.name
class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, nullable=False, primary_key=True, autoincrement=True)
    username = db.Column(db.String(32), nullable=False, unique=True, server_default='', index=True)
    role_id = db.Column(db.Integer, nullable=False, server_default='0')
    def __repr__(self):
        return '<User %r,Role id %r>' %(self.username,self.role_id)
一、连接数据库
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://user:password@host:port/dbname'
二、创建所有表
python
>>> from hello import db,Role,User
>>> db.create_all()
三、删除所有表
python
>>> from hello import db,Role,User
>>> db.drop_all()
四、插入行
# 插入单行
python
>>> from hello import db,Role,User
>>> db.session.add(Role(name='Admin'))
>>> db.session.commit()
>>> db.session.add(Role(name='Moderator'))
>>> db.session.add(Role(name='User'))
>>> db.session.commit()
# 插入多行
python
>>> from hello import db,Role,User
>>> db.session.add_all([User(username='john',role_id=1),User(username='susan',role_id=3),User(username='david',role_id=3)])
>>> db.session.commit()
五、更新行
python
>>> from hello import db,Role,User
>>> admin = Role.query.filter_by(name='Admin').first()
>>> admin.name='Administrator'
>>> db.session.commit()
六、删除行
python hello.py shell
>>> from hello import db,Role,User
>>> mod = Role.query.filter_by(name='Moderator').first()
>>> db.session.delete(mod)
>>> db.session.commit()
七、查询表
查询表中全部数据

# 注意，此处的查询结果完全取决于代码示例中的
# def __repr__(self)
# 这段函数，请各位小主们，好好斟酌下～
python
>>> from hello import db,Role,User
>>> Role.query.all()
[<Role u'Administrator'>, <Role u'User'>]
>>> User.query.all()
[<User u'john',Role id 1L>, <User u'susan',Role id 3L>, <User u'david',Role id 3L>]

按照一个条件过滤数据记录(where)

python
>>> from hello import db,Role,User
>>> Role.query.filter_by(name='Administrator').first()
<Role u'Administrator'>
>>> User.query.filter_by(role_id=3).all()
[<User u'susan',Role id 3L>, <User u'david',Role id 3L>]
>>> User.query.filter_by(role_id=3).first()
<User u'susan',Role id 3L>
按照两个条件过滤数据记录(where and)

python
>>> from hello import db,Role,User
>>> User.query.filter_by(role_id=3,username='susan').first()
<User u'susan',Role id 3L>
>>> User.query.filter_by(role_id=3,username='susan').all()
[<User u'susan',Role id 3L>]






=============================
flask部署 到　 apache
=============================
apt-get install python　flask
apt-get install apache2　libapache2-mod-wsgi

1.访问目录
在/var/www目录下新建myweb文件夹，并新增两个文件：hello.py 和 app.wsgi 
hello.py示例代码如下：

from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return ‘index page’

if __name__ == '__main__':
    app.run()

或者flasky　APP


app.wsgi示例代码如下：

import sys
reload(sys)
sys.setdefaultencoding('utf-8')
sys.path.insert(0,'/var/www/myweb')
from hello import app as application

或者:
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
sys.path.insert(0,'/home/android/ta/flask/pms')
from flasky import app as application


2.apache配置
在/etc/apache2/sites-avalible目录下新增配置文件myweb.conf 
myweb.conf示例代码如下：

<VirtualHost *:8000>
    ServerName 192.168.164.1

    WSGIDaemonProcess myweb threads=5
    WSGIScriptAlias / /var/www/myweb/app.wsgi

    <Directory /var/www/myweb>
        WSGIProcessGroup myweb
        WSGIApplicationGroup %{GLOBAL}
        WSGIScriptReloading On
        Order deny,allow
        Allow from all
    </Directory>
</VirtualHost>

3.配置生效
执行如下命令使站点生效：

a2ensite myweb.conf
service apache2 reload
