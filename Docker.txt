１．可以看到导入完成后，docker为我们生成了一个镜像ID，使用docker images也可以看到我们刚刚从本地导入的镜像。
注意镜像文件必须是tar.gz类型的文件。
[root@rocketmq-nameserver4 dev]# cat alibaba-rocketmq-3.2.6.tar.gz | docker import - rocketmq:3.2.6(镜像名自己定义)
[root@rocketmq-nameserver4 dev]# docker images


2、保存镜像
我们的镜像做好之后，我们要保存起来，以供备份使用，该怎么做？使用docker save命令，保存镜像到本地。

[root@rocketmq-nameserver4 dev]# docker save -o rocketmq.tar rocketmq ##-o：指定保存的镜像的名字；rocketmq.tar：保存到本地的镜像名称；rocketmq：镜像名字，通过"docker images"查看
3、载入镜像
我们有了本地的镜像文件，在需要的时候可以使用docker load将本地保存的镜像再次导入docker中。
docker load --input rocketmq.tar 或 docker load < rocketmq.tar

# 通过yum源安装docker
yum -y install docker
# 启动docker
systemctl start docker
# 开机自启
systemctl enable docker

# 查找centos镜像
docker search centos
# 下载centos镜像
docker pull docker.io/centos:latest


1.下载nginx

docker images　　　　　　　　　　#查看现有安装包
docker pull nginx　　　　　　　 #安装Nginx

2.运行nginx

docker run -p 80:80 -d nginx 　　#将80端口映射为80还是原先的80端口，或者8080:80，不可以不写。
ss -an | grep 80　　　　　　　　　　　#查看启动端口
docker ps　　　　　　　　　　　　　　　#查看docker进程


apt-get install vim
apt-get install yum



bash命令都一样，但是vi在我机器上是不能用的，但可以使用cp、mv 等命令，因为nginx都是配置好的，不能乱改。

1)可以通过在还未登录nignx容器前，把需要的文件写好，然后复制到指定目录下：
[root@localhost my.Shells]# docker cp hello.html 60969fd57efc://usr/share/nginx/html
[root@localhost my.Shells]# docker exec -it 60969fd57efc bash
root@60969fd57efc:/usr/share/nginx/html# ls
50x.html  hello.html  index.html
2）通过主机目录映射到容器
 docker run -p 80:80 -d -v /opt/html:usr/share/nginx/html nginx
 可以使用-v $PWD/html表示把当前路径下html目录映射为usr/share/nginx/html
 也就是说主机下的html就是容器下的usr/share/nginx/html
 html内的文件修改和添加就等同于容器usr/share/nginx/html文件操作
 外网访问就可以访问得到，就不用再登录容器操作文件了
 
 1.卸载服务
docker ps -a       　　　　　　　 #可查看所有已存在的Docker
docker stop <CONTAINER ID>      #停止Docker
docker rm <CONTAINER ID>        #删除Docker



查看当前运行的容器
sudo docker ps

查看所有容器
sudo docker ps -a


进入容器环境
sudo docker attach tinno-jenkins
## 其它方法
sudo docker exec -it 775c7c9ee1e1 /bin/bash


向容器内部发送指令
我们可以在不进入容器环境的情况下, 向容器内部发送指令
sudo docker exec tinno-jenkins touch 123.txt


docker高级命令
交换文件 docker cp
通过docker cp命令, 可以实现容器与外部环境的文件交换
我们在docker容器内部新建一个123.txt文件, 将它拷贝到外部环境, 在外部环境新建一个456.txt拷贝到docker容器内部(如下图)


查看镜像和容器的详细信息
# 查看镜像的详细信息
sudo docker inspect zhaoolee-centos:0.1 
# 查看容器的详细信息
sudo docker inspect zhaoolee-centos



第四部分: 私有仓库的创建
1. 下载私有仓库注册服务器的镜像
sudo docker pull registry:latest

2. 创建一个注册服务器容器

docker run -d -p 5000:5000 --name=server-registry --restart=always --privileged=true  -v /var/lib/docker/registry:/var/lib/registry  docker.io/registry


docker run -d -p 5000:5000 --name server-registry -v /tmp/registry:/tmp/registry docker.io/registry:latest
参数说明 -d容器在后端运行, -p 5000:5000在容器的5000端口运行并映射到外部系统的5000端口, --name server-registry容器命名为server-registry, -v /tmp/registry /tmp/registry把宿主机的目录/tmp/registry挂载到容器目录/tmp/registry

vim /etc/docker/daemon.json
如果daemon文件不存在，vim会自己创建一个，假如一下代码，
  {
  "insecure-registries":["主机的IP地址或者域名:5000"],
   "registry-mirrors": ["https://registry.docker-cn.com"]
  }

将修改好的容器commit出一个镜像.
docker commit 39eaa5aa7332 python3.6.4-dev
docker commit 8619e3527aa8 192.168.165.109:5000/mynginx2
docker images
docker push 192.168.165.109:5000/mynginx2



3. 为本地镜像添加标签，并将其归入本地仓库
为本地镜像添加标签
docker tag SourceIamgeName 192.168.163.24:5000/SourceIamgeName2.0

将被标记的本地镜像, push到仓库
docker push 192.168.165.109:5000/SourceIamgeName2.0

4.测试本地仓库的的可用性

docker pull 192.168.165.109:5000/mynginx2
docker images
docker ps
docker run -d --name mynginx -p 8000:80 192.168.165.109:5000/mynginx2








https://blog.csdn.net/deng624796905/article/details/86493330
https://my.oschina.net/jamesview/blog/2994112
https://www.jianshu.com/p/8f38f198724e
https://www.cnblogs.com/Huang-Niu/p/11407914.html
